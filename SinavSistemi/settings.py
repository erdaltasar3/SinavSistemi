"""
Django settings for SinavSistemi project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import json
import dj_database_url
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Secrets JSON dosyasının yolu
secrets_file = os.path.join(BASE_DIR, 'secrets.json')

# Secrets.json dosyası varsa kullan
if os.path.exists(secrets_file):
    with open(secrets_file) as f:
        secrets = json.loads(f.read())
else:
    # Dosya yoksa varsayılan değerleri kullan
    secrets = {}

def get_secret(setting, secrets=secrets):
    """Secrets dosyasından veya ortam değişkeninden ayarları al"""
    try:
        return secrets[setting]
    except KeyError:
        # Secrets dosyasında yoksa ortam değişkenlerine bak
        env_val = os.environ.get(setting)
        if env_val:
            return env_val
        # Varsayılan değerleri kaldırıyoruz, doğrudan hata fırlatıyoruz
        raise ImproperlyConfigured(f"Set the {setting} environment variable or secrets.json entry.")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secret('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = 'True'
# DEBUG = get_secret('DEBUG') == 'True'

ALLOWED_HOSTS = get_secret('ALLOWED_HOSTS').split(',')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "core",
    "yks",
    'crispy_forms',
    'crispy_bootstrap5',
    'django_celery_beat',
    'whitenoise.runserver_nostatic', # Whitenoise için eklendi
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware", # Whitenoise için eklendi
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "SinavSistemi.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "SinavSistemi" / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "SinavSistemi.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Render.com DATABASE_URL veya yerel veritabanı
DATABASE_URL = os.environ.get('DATABASE_URL')
if DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.config(default=DATABASE_URL, conn_max_age=600)
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': get_secret('DB_ENGINE') or 'django.db.backends.postgresql',
            'NAME': get_secret('DB_NAME') or 'sinav_sistemi',
            'USER': get_secret('DB_USER') or 'postgres',
            'PASSWORD': get_secret('DB_PASSWORD'),
            'HOST': get_secret('DB_HOST') or 'localhost',
            'PORT': get_secret('DB_PORT') or '5432',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "tr-tr"

TIME_ZONE = "Europe/Istanbul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# Daha basit bir statik dosya depolama seçeneği kullanıyoruz
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django Authentication Ayarları
LOGIN_URL = 'core:giris'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Session ayarları
SESSION_COOKIE_AGE = 1209600  # 2 hafta
SESSION_SAVE_EVERY_REQUEST = True

# Media files (user uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Render.com'da medya dosyaları için S3 veya benzer bir depolama kullanmanız önerilir
# Ancak şimdilik yerel dosya sistemini kullanacağız
# NOT: Ücretsiz Render planında kalıcı depolama olmadığı için media dosyaları silinebilir

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

# Email Settings (for sending verification codes etc.)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = get_secret('EMAIL_HOST') or 'smtp.gmail.com'
EMAIL_PORT = int(get_secret('EMAIL_PORT') or 587)
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False # Use TLS instead of SSL
EMAIL_HOST_USER = get_secret('EMAIL_HOST_USER') or 'sinav.merkezim.tr@gmail.com'
EMAIL_HOST_PASSWORD = get_secret('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Render.com'da Redis yoktur, bu yüzden Celery'yi şimdilik devre dışı bırakıyoruz
# Celery işlemleri için ek bir Redis hizmeti ayarlamanız veya alternatif bir çözüm bulmanız gerekecek
CELERY_TASK_ALWAYS_EAGER = True  # Tasks will be executed locally by blocking until the task returns
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'sqla+sqlite:///celery.sqlite')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'db+sqlite:///celery_results.sqlite')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Istanbul'
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 dakika
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # 25 dakika

# Django Celery Beat konfigürasyonu
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Üretim ortamı için güvenlik ayarları
if not DEBUG:
    # HTTPS ayarları
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    # Yerel geliştirme ortamında bu ayar sorun çıkarabilir,
    # bu yüzden şimdilik kapatıyoruz
    # SECURE_SSL_REDIRECT = True
    
    # HSTS ayarları
    SECURE_HSTS_SECONDS = 31536000  # 1 yıl
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # İçerik güvenliği politikası
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = 'DENY'

# Sentry veya diğer hata izleme araçları için yapılandırma eklenebilir
